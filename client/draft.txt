const onChangeInput = (e) => {
        if(e.target.value.length === 0) {
            return;
        }
        setIsWriting(true)
        highlightedCouple && setHighlightedCouple(recursiveCheck(e.target.value.length, highlightedCouple))
        let lastLetter = e.target.value.toLowerCase().split('').pop()
        let arrayOfLetters = e.target.value.split('')
        let isAllowed = useCheckAffiliation(lastLetter, [enMorse, noMorse, specialCharactersMorse, specialSymbolsMorse, {' ': 'nothing'}])
        if(!e.target.value) {
            isAllowed = true
        }
        if(isAllowed) {
            setValue(arrayOfLetters.join(''))
            setSentence(arrayOfLetters)
        } else {
            if(forbiddenRef.current) {
                clearTimeout(forbiddenRef.current)
            }
            setIsWriting(false)
            setIsForbiddenKeyPressed(true)
            forbiddenRef.current = setTimeout(() => {
                setIsForbiddenKeyPressed(false)
            }, 300)
        }
        if(timeoutRef.current) {
            clearTimeout(timeoutRef.current)
        }
        timeoutRef.current = setTimeout(() => {
            setIsWriting(false)
            const translationResult = [];
            for (let i = 0; i < e.target.value.length; i++) {
                let letter = e.target.value.toLowerCase().split('')[i]
                let isFound = false;
                for (const key in enMorse) {
                    if (key === letter) {
                        translationResult.push(enMorse[key])
                        isFound = true;
                        break
                    } else if (letter === ' ') {
                        translationResult.push(' ')
                        isFound = true;
                        break
                    }
                }
                if(isFound) {continue}
                for (const key in specialSymbolsMorse) {
                    if (key === letter) {
                        isFound = true;
                        translationResult.push(specialSymbolsMorse[key])
                        break
                    }
                }
                if(isFound) {continue}
                for (const key in specialCharactersMorse) {
                    if(key === letter) {
                        isFound = true;
                        translationResult.push(specialCharactersMorse[key])
                        break
                    }
                }
                if(isFound) {continue}
                for (const key in noMorse) {
                    if(key === letter) {
                        translationResult.push(noMorse[key])
                        break
                    }
                }
            }
            setTranslation(translationResult)
        }, 500)
    }